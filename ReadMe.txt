Теперь давайте научимся самостоятельно выводить наши объекты из базы данных на страницу в браузере:

Вспомним, как создать новый Django-проект
django-admin startproject project

Затем создадим приложение simpleapp, в котором будем учиться работать с представлениями
python manage.py startapp simpleapp

Добавим в приложение модели:
class Product(models.Model):
.....
class Category(models.Model):
........

Не забываем зарегистрировать модели, иначе мы не увидим их в админке.
simpleapp/admin.py
from django.contrib import admin
from .models import Category, Product
admin.site.register(Category)
admin.site.register(Product)

Теперь давайте перейдём к тому, чего мы еще не делали — напишем наше первое представление (view)!
Можно было бы взяться за написание собственных представлений, но, как это часто бывает в Django,
многое сделано за нас и для нас. В этот раз для нас сделали такую вещь, как дженерики (generics).
Из коробки имеются все необходимые дженерики для реализации стандартного функционала сайтов:
вывод списка и одного объекта, а также создание, редактирование и удаление данных.
Дженерики — это набор классов, которые предоставляет нам Django. Каждый класс реализует свою логику.
Нам необходимо лишь выбрать класс, который реализует то, что нам нужно, и создать свой собственный,
наследуя выбранный. Например, в данный момент нам нужен дженерик ListView, который реализует вывод
списка объектов модели, используя указанный шаблон. А вот какую модель, как и в какой шаблон выводить,
мы должны указать сами.

simpleapp/views.py
class ProductsList(ListView):
    # Указываем модель, объекты которой мы будем выводить
    model = Product
    # Поле, которое будет использоваться для сортировки объектов
    ordering = 'name'
    # Указываем имя шаблона, в котором будут все инструкции о том,
    # как именно пользователю должны быть показаны наши объекты
    template_name = 'products.html'
    # Это имя списка, в котором будут лежать все объекты.
    # Его надо указать, чтобы обратиться к списку объектов в html-шаблоне.
    context_object_name = 'products'

Вот так мы можем использовать дженерик ListView для вывода списка товаров:

Создаем свой класс, который наследуется от ListView.
Указываем модель, из которой будем выводить данные.
Указываем поле сортировки данных модели (необязательно).
Записываем название шаблона.
Объявляем, как хотим назвать переменную в шаблоне.

Представление (view) полностью настроено. Теперь надо указать, когда его нужно использовать.
Давайте настроим адрес, чтобы любой пользователь нашего приложения мог ознакомиться с товарами.
Для этого необходимо настроить пути в файле urls.py. При выполнении команды инициализации нового приложения
Django не создавал этот файл в нашей директории, поэтому мы должны сделать это сами. Создадим файл
urls.py и заполним его, как показано ниже.

from django.urls import path
# Импортируем созданное нами представление
from .views import ProductsList

urlpatterns = [
   # path — означает путь.
   # В данном случае путь ко всем товарам у нас останется пустым,
   # чуть позже станет ясно почему.
   # Т.к. наше объявленное представление является классом,
   # а Django ожидает функцию, нам надо представить этот класс в виде view.
   # Для этого вызываем метод as_view.
   path('', ProductsList.as_view()),
]
Здесь мы задали путь к нашему представлению, но это ещё не всё.
Давайте сделаем так, чтобы для работы с товарами у нас была отдельная ссылка.
Например, просмотр всех товаров был доступен по ссылке: products/, создание товара —
products/create и так далее.

Однако всё это позже. Сейчас нас интересует только вывод из базы данных.
Для этого нам надо отправиться в наш главный файл urls.py, в котором мы уже подключали
flatpages и сделать так, чтобы он автоматически включал все наши адреса из приложения и
добавлял к нему префикс products. Выполнить это очень легко.

project/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
   path('admin/', admin.site.urls),
   path('pages/', include('django.contrib.flatpages.urls')),
   # Делаем так, чтобы все адреса из нашего приложения (simpleapp/urls.py)
   # подключались к главному приложению с префиксом products/.
   path('products/', include('simpleapp.urls')),
]

Не забудьте изменить настройки в settings.py:

Добавить ваше новое приложение в список
INSTALLED_APPS.
Обновить настройку TEMPLATES.   https://developer.mozilla.org/ru/docs/Learn/Server-side/Django/skeleton_website
Добавить список STATICFILES_DIRS.   https://metanit.com/python/django/2.2.php
Мы уже проходили эти настройки в юнитах D1.3 и D1.5.

После этого для наших новых моделей нужно создать и применить миграции.

''' как формируются ссылки в проекте.
Изначально у нас есть домен http://127.0.0.1:8000/ к нему добавляется префикс, который вы определяете в основном project/urls
В project/urls, определен маршрут path('app/', include('app.urls')) и мы получаем ссылку http://127.0.0.1:8000/app/
дальше добавляются префикс из app/urls, которые мы включаем сюда функцией include('app.urls')
В app/urls, определен маршрут path('', MyList.as_view()), получаем ссылку http://127.0.0.1:8000/app/
В app/urls, определен маршрут path('something', MyList.as_view()), получаем ссылку http://127.0.0.1:8000/app/something
В app/urls, определен маршрут path('<int:pk>', MyDetail.as_view()), получаем ссылку http://127.0.0.1:8000/app/<int:pk>,
где <int:pk> это число, как правильно id нашего объекта модели'''

Напомним, что скачать шаблон и статические файлы можно по ссылке. После скачивания нужно создать папку static и добавить
в нее файлы styles.css по пути project/static/css/styles.css и index.html в project/static/index.html.
В templates/flatpages/default.html должен быть базовый HTML темплейт. Вспомнить, что и как нужно настроить, вы можете в модуле D1.